#!/usr/bin/env node
/**
 * Extract <template #example> blocks from component docs and inject them into index.html
 *
 * Usage:
 *   node ui-docs/scripts/extract_examples.js
 *
 * What it does:
 * - Scans all component .md files for <template #example>...</template> blocks
 * - Skips any example block that references <ListAll /> (since that is a Vue-only example)
 * - Replaces the contents of <body> in ui-docs/index.html with all collected examples
 *
 * Notes:
 * - This script is intentionally dependency-free (Node.js only).
 * - It preserves the existing <head> and <body ...attributes> from index.html.
 * - Examples are grouped per source file with a simple section header.
 */

const fs = require("fs/promises")
const path = require("path")

async function main() {
  const rootDir = path.resolve(__dirname, "..")
  const componentsDir = path.join(rootDir, "docs", "components")
  const indexPath = path.join(rootDir, "index.html")

  // 1) Collect all markdown files in components directory
  const mdFiles = await collectMarkdownFiles(componentsDir)

  // 2) Extract examples from each file
  const examplesByFile = []
  for (const filePath of mdFiles.sort()) {
    const content = await fs.readFile(filePath, "utf8")
    const examples = extractExampleBlocks(content)
      // Skip any example block that references the ListAll component
      .filter((html) => !/<\s*ListAll\b/.test(html))

    if (examples.length > 0) {
      examplesByFile.push({
        filePath,
        relPath: path.relative(rootDir, filePath),
        examples,
      })
    }
  }

  // 3) Render aggregated HTML
  const aggregated = renderAggregatedExamples(examplesByFile)

  // 4) Inject into index.html (replace <body>...</body> content only)
  let indexHtml = await fs.readFile(indexPath, "utf8")
  indexHtml = replaceBodyContent(indexHtml, aggregated)

  // 5) Write back index.html
  await fs.writeFile(indexPath, indexHtml, "utf8")

  // 6) Log summary
  const totalExamples = examplesByFile.reduce(
    (sum, f) => sum + f.examples.length,
    0,
  )
  console.log(
    `[extract_examples] Injected ${totalExamples} example(s) from ${examplesByFile.length} file(s) into ${path.relative(
      process.cwd(),
      indexPath,
    )}`,
  )
}

/**
 * Recursively collect .md files under a directory.
 */
async function collectMarkdownFiles(startDir) {
  const out = []

  async function walk(dir) {
    const entries = await fs.readdir(dir, { withFileTypes: true })
    for (const entry of entries) {
      const full = path.join(dir, entry.name)
      if (entry.isDirectory()) {
        await walk(full)
      } else if (entry.isFile()) {
        // Only process Markdown files
        if (full.toLowerCase().endsWith(".md")) {
          out.push(full)
        }
        // Explicitly ignore list-all.vue (requested) and any .vue in general
        // (since we only want to parse markdown docs)
      }
    }
  }

  await walk(startDir)
  return out
}

/**
 * Extracts contents of <template #example>...</template> blocks.
 */
function extractExampleBlocks(markdown) {
  const results = []
  const re = /<template\s+#example>([\s\S]*?)<\/template>/gi
  let match
  while ((match = re.exec(markdown)) !== null) {
    const inner = match[1].trim()
    if (inner) results.push(inner)
  }
  return results
}

/**
 * Renders the aggregated examples HTML to be injected into the body.
 */
function renderAggregatedExamples(examplesByFile) {
  const parts = []

  parts.push("<!-- Generated by ui-docs/scripts/extract_examples.js -->")
  parts.push(
    `<style>
       .examples-main{display:grid;gap:var(--size-4,1.5rem);padding:var(--size-4,1.5rem);max-width:1200px;margin-inline:auto;}
       .section{display:grid;gap:var(--size-3,1rem);}
       .section-header{z-index: 10; position:sticky;top:var(--size-2);background:color-mix(in oklab, Canvas 85%, transparent);backdrop-filter:blur(4px);padding:.5rem;border-radius:8px;display:flex;align-items:center;justify-content:space-between;gap:.5rem;}
       .section-title{margin:0;font-weight:600;}
       .section-meta{margin:.25rem 0 0 0;color:var(--text-2,currentColor);font-size:.9em;}
       .back-to-top{white-space:nowrap;}
       .example{display:block;padding:var(--size-3,1rem);border:1px dashed color-mix(in oklab,currentColor 30%,transparent);border-radius:12px;}
    </style>`,
  )
  parts.push(`<main id="top" class="examples-main">`)

  // Table of contents
  const tocItems = examplesByFile.map(({ relPath, examples }) => {
    const title = titleFromRelPath(relPath)
    const id = sectionIdFromRelPath(relPath)
    return { title, id, count: examples.length }
  })

  parts.push(
    `<nav>` +
      `<h1 class="h3 toc-title">Table of contents</h1>` +
      `<ul>` +
      tocItems
        .map(
          (it) =>
            `<li><a href="#${it.id}" class="link">${escapeHtml(it.title)}</a> <small>(${it.count})</small></li>`,
        )
        .join("") +
      `</ul>` +
      `</nav>`,
  )

  for (const { relPath, examples } of examplesByFile) {
    const title = titleFromRelPath(relPath)
    const id = sectionIdFromRelPath(relPath)

    parts.push(
      `<section id="${id}" data-source="${escapeHtml(relPath)}" class="section">`,
    )
    parts.push(
      `<header class="section-header">` +
        `<div><h2 class="h4 section-title">${escapeHtml(title)}</h2>` +
        `<p class="section-meta">${escapeHtml(relPath)}</p></div>` +
        `<a href="#top" class="link back-to-top">Back to top</a>` +
        `</header>`,
    )

    examples.forEach((html, idx) => {
      // Wrap each example in a simple container to give spacing
      parts.push(
        `<div class="aggregated-example example" data-example-index="${idx + 1}">\n${html}\n</div>`,
      )
    })

    parts.push(`</section>`)
  }

  parts.push(`</main>`)
  return parts.join("\n")
}

/**
 * Replaces the content between <body ...> and </body> while preserving attributes.
 */
function replaceBodyContent(html, newBodyInner) {
  const bodyOpenRe = /<body[^>]*>/i
  const bodyCloseRe = /<\/body>/i

  const openMatch = html.match(bodyOpenRe)
  const closeMatch = html.match(bodyCloseRe)

  if (!openMatch || !closeMatch) {
    throw new Error("Could not find <body> tags in index.html")
  }

  const startIdx = openMatch.index + openMatch[0].length
  const endIdx = closeMatch.index

  return (
    html.slice(0, startIdx) + "\n" + newBodyInner + "\n" + html.slice(endIdx)
  )
}

/**
 * Convert a relative path like "docs/components/button.md" to a nicer title, e.g., "button"
 */
function titleFromRelPath(relPath) {
  const base = path.basename(relPath, path.extname(relPath))
  return base.replace(/[-_]/g, " ")
}

function sectionIdFromRelPath(relPath) {
  const t = titleFromRelPath(relPath)
  return slugify(t)
}

function slugify(str) {
  return String(str)
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
}

/**
 * Minimal HTML escaping for injected text nodes/attributes.
 */
function escapeHtml(str) {
  return String(str)
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;")
    .replaceAll('"', "&quot;")
}

main().catch((err) => {
  console.error("[extract_examples] Error:", err)
  process.exit(1)
})
