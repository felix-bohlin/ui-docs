#!/usr/bin/env node

const fs = require("node:fs/promises")
const path = require("node:path")

const projectRoot = path.resolve(__dirname, "..")

const themes = [
  {
    name: "theme-one.css",
    sources: [
      path.join(projectRoot, "node_modules/opui-css/dist/theme-one.css"),
      path.join(projectRoot, "docs/.vitepress/custom.css"),
    ],
  },
  {
    name: "theme-two.css",
    sources: [
      path.join(projectRoot, "node_modules/opui-css/dist/theme-two.css"),
      path.join(projectRoot, "docs/.vitepress/custom.css"),
    ],
  },
]

async function buildTheme({ name, sources }) {
  const outputPath = path.join(projectRoot, "docs/.vitepress/theme", name)
  const banner =
    "/* Auto-generated by scripts/build_themes.cjs. Do not edit directly. */\n"

  const contents = await Promise.all(
    sources.map(async (sourcePath) => {
      try {
        return await fs.readFile(sourcePath, "utf8")
      } catch (error) {
        throw new Error(
          `Failed to read ${sourcePath} while generating ${name}: ${error.message}`,
        )
      }
    }),
  )

  const payload = banner + contents.join("\n\n") + "\n"

  await fs.mkdir(path.dirname(outputPath), { recursive: true })
  await fs.writeFile(outputPath, payload, "utf8")

  console.log(`Generated ${path.relative(projectRoot, outputPath)}`)
}

async function run() {
  for (const theme of themes) {
    await buildTheme(theme)
  }
}

run().catch((error) => {
  console.error(error)
  process.exit(1)
})
